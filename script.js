    // Get SVG element
    const svg = document.getElementById('ripple');

    // Resize SVG to fit window size
    function resizeSVG() {
      let bbox = svg.getBoundingClientRect();
      svg.setAttribute("viewBox", `0 0 ${bbox.width} ${bbox.height}`);
    }
    // Initially resize SVG
    resizeSVG();

    // Listen for window size change events and resize the SVG
    window.addEventListener('resize', resizeSVG);

    // Ripple diffusion animation effect
    function animateRipple(circle) {
      // Get the initial position and radius of the circle
      const x = parseFloat(circle.getAttribute('cx'));
      const y = parseFloat(circle.getAttribute('cy'));
      const r = parseFloat(circle.getAttribute('r'));

      // The radius of the circle gradually increases and then disappears
      const animation = circle.animate(
        [
          { r: `${r}`, opacity: 0.8 },
          { r: `${r + 200}`, opacity: 0 }
        ],
        {
          duration: 3000,
          easing: "ease-out"
        }
      );

      // Regenerate the circle after the animation ends
      animation.onfinish = () => {
        svg.removeChild(circle);
        createAutoRipple();
      };
    }

    // Create auto-diffused circles
    function createAutoRipple() {
      // Randomly generate position coordinates and radius size
      const x = Math.floor(Math.random() * window.innerWidth);
      const y = Math.floor(Math.random() * window.innerHeight);
      const r = Math.floor(Math.random() * 50) + 10; // Generates a radius between 10 and 60

      // Create a new circle element
      const circle = document.createElementNS("http://www.w3.org/2000/svg", "circle");
      circle.setAttribute("cx", x);
      circle.setAttribute("cy", y);
      circle.setAttribute("r", r);
      circle.setAttribute("stroke", "#ffffff");
      circle.setAttribute("fill", "none");
      svg.appendChild(circle);

      animateRipple(circle);
    }

    // Create a diffuse circle generated by user clicks
    function createRipple(event) {
      // Get the coordinates of the clicked position
      const x = event.clientX - svg.getBoundingClientRect().left;
      const y = event.clientY - svg.getBoundingClientRect().top;

      // Create a new circle element
      const circle = document.createElementNS("http://www.w3.org/2000/svg", "circle");
      circle.setAttribute("cx", x);
      circle.setAttribute("cy", y);
      circle.setAttribute("r", "0");
      circle.setAttribute("stroke", "#ffffff");
      circle.setAttribute("fill", "none");
      svg.appendChild(circle);

      animateRipple(circle);
    }

    // Start auto-diffusion circle
    for (let i = 0; i < 2; i++) {
      createAutoRipple();
    }

    // Listen for mouse click events
    svg.addEventListener('click', createRipple);